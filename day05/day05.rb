input = "3,225,1,225,6,6,1100,1,238,225,104,0,1101,37,34,224,101,-71,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1002,113,50,224,1001,224,-2550,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,13,50,225,102,7,187,224,1001,224,-224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,1101,79,72,225,1101,42,42,225,1102,46,76,224,101,-3496,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1102,51,90,225,1101,11,91,225,1001,118,49,224,1001,224,-140,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,2,191,87,224,1001,224,-1218,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1,217,83,224,1001,224,-124,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,32,77,225,1101,29,80,225,101,93,58,224,1001,224,-143,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1101,45,69,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,7,226,226,224,102,2,223,223,1005,224,329,101,1,223,223,108,677,226,224,102,2,223,223,1005,224,344,1001,223,1,223,1108,226,677,224,102,2,223,223,1005,224,359,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,374,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,389,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,108,677,677,224,102,2,223,223,1005,224,419,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,434,1001,223,1,223,107,226,677,224,102,2,223,223,1005,224,449,101,1,223,223,1108,677,677,224,1002,223,2,223,1006,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,479,101,1,223,223,1007,677,677,224,1002,223,2,223,1005,224,494,101,1,223,223,1008,226,226,224,102,2,223,223,1006,224,509,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,524,1001,223,1,223,8,226,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1007,677,226,224,102,2,223,223,1006,224,554,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,569,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,584,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,614,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,629,1001,223,1,223,1008,226,677,224,102,2,223,223,1005,224,644,101,1,223,223,1107,226,226,224,102,2,223,223,1006,224,659,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226"
@insts = input.split(",")
@pos = 0

def read_params(nr, mode1="1", mode2="1")
  param1 = @insts[@pos+1].to_i
  param1 = @insts[param1].to_i if mode1 == "0"
  return param1 if nr == 1

  param2 = @insts[@pos+2].to_i
  param2 = @insts[param2].to_i if mode2 == "0"
  return param1, param2 if nr == 2

  param3 = @insts[@pos+3].to_i
  return param1, param2, param3
end

loop do
  inst = @insts[@pos].dup
  # puts ""
  # p "[#{@pos}]", inst, @insts

  if inst.size > 2
    opcode = inst.slice!(-2,2).to_i
    mode1 = inst.slice!(-1,1)
    mode2 = inst.slice!(-1,1) || "0"
    mode3 = inst.slice!(-1,1) || "0"
  else
    opcode = inst.to_i
    mode1 = mode2 = mode3 = "0"
  end

  # puts "#{opcode} #{mode1} #{mode2} #{mode3}"

  case opcode
  when 1 # sum
    param1, param2, param3 = read_params(3, mode1, mode2)
    sum = param1 + param2
    @insts[param3] = sum.to_s
    # puts "summing #{param1} #{ "[#{@insts[@pos+1].to_i}]" if mode1 == "0"} + #{param2} #{ "[#{@insts[@pos+2].to_i}]" if mode2 == "0"} = #{sum} into #{param3}"
    @pos += 4
  when 2 # mult
    param1, param2, param3 = read_params(3, mode1, mode2)
    mult = param1 * param2
    @insts[param3] = mult.to_s
    # puts "multing #{param1} #{ "[#{@insts[@pos+1].to_i}]" if mode1 == "0"} * #{param2} #{ "[#{@insts[@pos+2].to_i}]" if mode2 == "0"} = #{mult} into #{param3}"
    @pos += 4
  when 3 # input
    print "?> "
    input = gets.chomp
    param1 = read_params(1)
    @insts[param1] = input
    @pos += 2
  when 4 # output
    param1 = read_params(1, "0")
    puts param1
    @pos += 2
  when 5 # jump unless zero
    param1, param2 = read_params(2, mode1, mode2)
    # puts "jump unless zero #{param1} #{ "[#{@insts[@pos+1].to_i}]" if mode1 == "0"} -> #{param2} #{ "[#{@insts[@pos+2].to_i}]" if mode2 == "0"}"
    @pos = param1 != 0 ? param2 : (@pos + 3)
  when 6 # jump if zero
    param1, param2 = read_params(2, mode1, mode2)
    # puts "jump if zero #{param1} #{ "[#{@insts[@pos+1].to_i}]" if mode1 == "0"} -> #{param2} #{ "[#{@insts[@pos+2].to_i}]" if mode2 == "0"}"
    @pos = param1 == 0 ? param2 : (@pos + 3)
  when 7 # less than
    param1, param2, param3 = read_params(3, mode1, mode2)
    @insts[param3] = param1 < param2 ? "1" : "0"
    # puts "less than #{param1} #{ "[#{@insts[@pos+1].to_i}]" if mode1 == "0"} < #{param2} #{ "[#{@insts[@pos+2].to_i}]" if mode2 == "0"} ? [#{param3}] = #{@insts[param3]}"
    @pos += 4
  when 8 # equals
    param1, param2, param3 = read_params(3, mode1, mode2)
    @insts[param3] = param1 == param2 ? "1" : "0"
    # puts "equals #{param1} #{ "[#{@insts[@pos+1].to_i}]" if mode1 == "0"} == #{param2} #{ "[#{@insts[@pos+2].to_i}]" if mode2 == "0"} ? [#{param3}] = #{@insts[param3]}"
    @pos += 4
  when 99
    break
  else
    raise "oops!"
  end
end
